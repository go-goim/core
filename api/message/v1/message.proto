syntax = "proto3";

package api.message.v1;
option go_package = "api/message/v1;v1";

import "validate/validate.proto";

import "transport/response/response.proto";

enum MessageContentType {
  UnknownContentType = 0;
  Text = 1;
  Image = 2;
  Voice = 3;
}

// SendMessageReq receive data from gateway
message SendMessageReq {
  string from_user = 1 [(validate.rules).string.min_len = 20];
  string to_user = 2 [(validate.rules).string.min_len = 20];
  MessageContentType content_type = 3 [(validate.rules).enum.defined_only = true];
  string content = 4 [(validate.rules).string = {min_len: 1, max_len: 1024}];
}

// SendMessageResp is response body for sendMessage
message SendMessageResp {
  transport.response.BaseResponse response = 1;
  // MsgSeq is unique seq of a message
  string msg_seq = 3;
}

// SendMessager provide send message service
service SendMessager {
  // SendMessage send message to one or multi users/channels
  rpc SendMessage(SendMessageReq) returns (SendMessageResp);
  // Broadcast send message to all online user
  rpc Broadcast(SendMessageReq) returns (SendMessageResp);
}

enum PushMessageType {
  UnknownUserType = 0;
  // user to user
  User = 1;
  // user to group
  Group = 2;
  // global broadcast
  Broadcast = 3;
}

// MqMessage is message protocol when pub/sub msg to mq
message MqMessage {
  string from_user = 1;
  string to_user = 2;
  PushMessageType push_message_type = 3;
  MessageContentType content_type = 4;
  string content = 5;
}

// PushMessage use for push a message to persistence connection server
message PushMessageReq {
  string from_user = 1;
  string to_user = 2;
  string agent_id = 3;
  PushMessageType push_message_type = 4;
  MessageContentType content_type = 5;
  string content = 6;
  string msg_seq = 7;
}

service PushMessager {
  rpc PushMessage(PushMessageReq) returns (transport.response.BaseResponse);
}

// BriefMessage is message with basic information
message BriefMessage {
  string from_user = 1;
  string to_user = 2;
  MessageContentType content_type = 3;
  string content = 4;
  string msg_seq = 5;
}

message QueryOfflineMessageReq {
  string user_id = 1 [(validate.rules).string.min_len = 20];
  string last_msg_seq = 2 [(validate.rules).string.min_len = 10];
  bool onlyCount  = 3;
  int32 page = 4;
  int32 page_size = 5 [(validate.rules).int32 = {gte: 1, lte: 100}];
}

message QueryOfflineMessageResp {
  transport.response.BaseResponse response = 1;
  repeated BriefMessage messages = 2;
}

service OfflineMessage {
  rpc QueryOfflineMessage(QueryOfflineMessageReq) returns (QueryOfflineMessageResp);
}
