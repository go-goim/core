// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	response "github.com/yusank/goim/api/transport/response"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SendMessagerClient is the client API for SendMessager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SendMessagerClient interface {
	// SendMessage send message to one or multi users/channels
	SendMessage(ctx context.Context, in *SendMessageReq, opts ...grpc.CallOption) (*SendMessageResp, error)
	// Broadcast send message to all online user
	Broadcast(ctx context.Context, in *SendMessageReq, opts ...grpc.CallOption) (*SendMessageResp, error)
}

type sendMessagerClient struct {
	cc grpc.ClientConnInterface
}

func NewSendMessagerClient(cc grpc.ClientConnInterface) SendMessagerClient {
	return &sendMessagerClient{cc}
}

func (c *sendMessagerClient) SendMessage(ctx context.Context, in *SendMessageReq, opts ...grpc.CallOption) (*SendMessageResp, error) {
	out := new(SendMessageResp)
	err := c.cc.Invoke(ctx, "/api.message.v1.SendMessager/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendMessagerClient) Broadcast(ctx context.Context, in *SendMessageReq, opts ...grpc.CallOption) (*SendMessageResp, error) {
	out := new(SendMessageResp)
	err := c.cc.Invoke(ctx, "/api.message.v1.SendMessager/Broadcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SendMessagerServer is the server API for SendMessager service.
// All implementations must embed UnimplementedSendMessagerServer
// for forward compatibility
type SendMessagerServer interface {
	// SendMessage send message to one or multi users/channels
	SendMessage(context.Context, *SendMessageReq) (*SendMessageResp, error)
	// Broadcast send message to all online user
	Broadcast(context.Context, *SendMessageReq) (*SendMessageResp, error)
	mustEmbedUnimplementedSendMessagerServer()
}

// UnimplementedSendMessagerServer must be embedded to have forward compatible implementations.
type UnimplementedSendMessagerServer struct {
}

func (UnimplementedSendMessagerServer) SendMessage(context.Context, *SendMessageReq) (*SendMessageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedSendMessagerServer) Broadcast(context.Context, *SendMessageReq) (*SendMessageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (UnimplementedSendMessagerServer) mustEmbedUnimplementedSendMessagerServer() {}

// UnsafeSendMessagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SendMessagerServer will
// result in compilation errors.
type UnsafeSendMessagerServer interface {
	mustEmbedUnimplementedSendMessagerServer()
}

func RegisterSendMessagerServer(s grpc.ServiceRegistrar, srv SendMessagerServer) {
	s.RegisterService(&SendMessager_ServiceDesc, srv)
}

func _SendMessager_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendMessagerServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.message.v1.SendMessager/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendMessagerServer).SendMessage(ctx, req.(*SendMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SendMessager_Broadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendMessagerServer).Broadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.message.v1.SendMessager/Broadcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendMessagerServer).Broadcast(ctx, req.(*SendMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SendMessager_ServiceDesc is the grpc.ServiceDesc for SendMessager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SendMessager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.message.v1.SendMessager",
	HandlerType: (*SendMessagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _SendMessager_SendMessage_Handler,
		},
		{
			MethodName: "Broadcast",
			Handler:    _SendMessager_Broadcast_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/message/v1/message.proto",
}

// PushMessagerClient is the client API for PushMessager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PushMessagerClient interface {
	PushMessage(ctx context.Context, in *PushMessageReq, opts ...grpc.CallOption) (*response.BaseResponse, error)
}

type pushMessagerClient struct {
	cc grpc.ClientConnInterface
}

func NewPushMessagerClient(cc grpc.ClientConnInterface) PushMessagerClient {
	return &pushMessagerClient{cc}
}

func (c *pushMessagerClient) PushMessage(ctx context.Context, in *PushMessageReq, opts ...grpc.CallOption) (*response.BaseResponse, error) {
	out := new(response.BaseResponse)
	err := c.cc.Invoke(ctx, "/api.message.v1.PushMessager/PushMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PushMessagerServer is the server API for PushMessager service.
// All implementations must embed UnimplementedPushMessagerServer
// for forward compatibility
type PushMessagerServer interface {
	PushMessage(context.Context, *PushMessageReq) (*response.BaseResponse, error)
	mustEmbedUnimplementedPushMessagerServer()
}

// UnimplementedPushMessagerServer must be embedded to have forward compatible implementations.
type UnimplementedPushMessagerServer struct {
}

func (UnimplementedPushMessagerServer) PushMessage(context.Context, *PushMessageReq) (*response.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushMessage not implemented")
}
func (UnimplementedPushMessagerServer) mustEmbedUnimplementedPushMessagerServer() {}

// UnsafePushMessagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PushMessagerServer will
// result in compilation errors.
type UnsafePushMessagerServer interface {
	mustEmbedUnimplementedPushMessagerServer()
}

func RegisterPushMessagerServer(s grpc.ServiceRegistrar, srv PushMessagerServer) {
	s.RegisterService(&PushMessager_ServiceDesc, srv)
}

func _PushMessager_PushMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushMessagerServer).PushMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.message.v1.PushMessager/PushMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushMessagerServer).PushMessage(ctx, req.(*PushMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PushMessager_ServiceDesc is the grpc.ServiceDesc for PushMessager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PushMessager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.message.v1.PushMessager",
	HandlerType: (*PushMessagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushMessage",
			Handler:    _PushMessager_PushMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/message/v1/message.proto",
}

// OfflineMessageClient is the client API for OfflineMessage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OfflineMessageClient interface {
	QueryOfflineMessage(ctx context.Context, in *QueryOfflineMessageReq, opts ...grpc.CallOption) (*QueryOfflineMessageResp, error)
}

type offlineMessageClient struct {
	cc grpc.ClientConnInterface
}

func NewOfflineMessageClient(cc grpc.ClientConnInterface) OfflineMessageClient {
	return &offlineMessageClient{cc}
}

func (c *offlineMessageClient) QueryOfflineMessage(ctx context.Context, in *QueryOfflineMessageReq, opts ...grpc.CallOption) (*QueryOfflineMessageResp, error) {
	out := new(QueryOfflineMessageResp)
	err := c.cc.Invoke(ctx, "/api.message.v1.OfflineMessage/QueryOfflineMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OfflineMessageServer is the server API for OfflineMessage service.
// All implementations must embed UnimplementedOfflineMessageServer
// for forward compatibility
type OfflineMessageServer interface {
	QueryOfflineMessage(context.Context, *QueryOfflineMessageReq) (*QueryOfflineMessageResp, error)
	mustEmbedUnimplementedOfflineMessageServer()
}

// UnimplementedOfflineMessageServer must be embedded to have forward compatible implementations.
type UnimplementedOfflineMessageServer struct {
}

func (UnimplementedOfflineMessageServer) QueryOfflineMessage(context.Context, *QueryOfflineMessageReq) (*QueryOfflineMessageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOfflineMessage not implemented")
}
func (UnimplementedOfflineMessageServer) mustEmbedUnimplementedOfflineMessageServer() {}

// UnsafeOfflineMessageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OfflineMessageServer will
// result in compilation errors.
type UnsafeOfflineMessageServer interface {
	mustEmbedUnimplementedOfflineMessageServer()
}

func RegisterOfflineMessageServer(s grpc.ServiceRegistrar, srv OfflineMessageServer) {
	s.RegisterService(&OfflineMessage_ServiceDesc, srv)
}

func _OfflineMessage_QueryOfflineMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOfflineMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfflineMessageServer).QueryOfflineMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.message.v1.OfflineMessage/QueryOfflineMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfflineMessageServer).QueryOfflineMessage(ctx, req.(*QueryOfflineMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OfflineMessage_ServiceDesc is the grpc.ServiceDesc for OfflineMessage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OfflineMessage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.message.v1.OfflineMessage",
	HandlerType: (*OfflineMessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryOfflineMessage",
			Handler:    _OfflineMessage_QueryOfflineMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/message/v1/message.proto",
}
