// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/user/friend/v1/friend.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Friend with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Friend) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Friend with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FriendMultiError, or nil if none found.
func (m *Friend) ValidateAll() error {
	return m.validate(true)
}

func (m *Friend) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for FriendUid

	// no validation rules for FriendName

	// no validation rules for FriendAvatar

	// no validation rules for Status

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return FriendMultiError(errors)
	}

	return nil
}

// FriendMultiError is an error wrapping multiple validation errors returned by
// Friend.ValidateAll() if the designated constraints aren't met.
type FriendMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FriendMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FriendMultiError) AllErrors() []error { return m }

// FriendValidationError is the validation error returned by Friend.Validate if
// the designated constraints aren't met.
type FriendValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FriendValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FriendValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FriendValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FriendValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FriendValidationError) ErrorName() string { return "FriendValidationError" }

// Error satisfies the builtin error interface
func (e FriendValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFriend.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FriendValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FriendValidationError{}

// Validate checks the field values on UpdateFriendStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateFriendStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFriendStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFriendStatusRequestMultiError, or nil if none found.
func (m *UpdateFriendStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFriendStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateFriendStatusRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateFriendStatusRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateFriendStatusRequestValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateFriendStatusRequestMultiError(errors)
	}

	return nil
}

// UpdateFriendStatusRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateFriendStatusRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateFriendStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFriendStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFriendStatusRequestMultiError) AllErrors() []error { return m }

// UpdateFriendStatusRequestValidationError is the validation error returned by
// UpdateFriendStatusRequest.Validate if the designated constraints aren't met.
type UpdateFriendStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFriendStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFriendStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFriendStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFriendStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFriendStatusRequestValidationError) ErrorName() string {
	return "UpdateFriendStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFriendStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFriendStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFriendStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFriendStatusRequestValidationError{}

// Validate checks the field values on GetFriendResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetFriendResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendResponseMultiError, or nil if none found.
func (m *GetFriendResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFriendResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFriendResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFriendResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFriend()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFriendResponseValidationError{
					field:  "Friend",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFriendResponseValidationError{
					field:  "Friend",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFriend()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFriendResponseValidationError{
				field:  "Friend",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetFriendResponseMultiError(errors)
	}

	return nil
}

// GetFriendResponseMultiError is an error wrapping multiple validation errors
// returned by GetFriendResponse.ValidateAll() if the designated constraints
// aren't met.
type GetFriendResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendResponseMultiError) AllErrors() []error { return m }

// GetFriendResponseValidationError is the validation error returned by
// GetFriendResponse.Validate if the designated constraints aren't met.
type GetFriendResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendResponseValidationError) ErrorName() string {
	return "GetFriendResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendResponseValidationError{}

// Validate checks the field values on QueryFriendListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryFriendListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryFriendListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryFriendListRequestMultiError, or nil if none found.
func (m *QueryFriendListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryFriendListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUid()); l < 20 || l > 24 {
		err := QueryFriendListRequestValidationError{
			field:  "Uid",
			reason: "value length must be between 20 and 24 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return QueryFriendListRequestMultiError(errors)
	}

	return nil
}

// QueryFriendListRequestMultiError is an error wrapping multiple validation
// errors returned by QueryFriendListRequest.ValidateAll() if the designated
// constraints aren't met.
type QueryFriendListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryFriendListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryFriendListRequestMultiError) AllErrors() []error { return m }

// QueryFriendListRequestValidationError is the validation error returned by
// QueryFriendListRequest.Validate if the designated constraints aren't met.
type QueryFriendListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryFriendListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryFriendListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryFriendListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryFriendListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryFriendListRequestValidationError) ErrorName() string {
	return "QueryFriendListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryFriendListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryFriendListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryFriendListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryFriendListRequestValidationError{}

// Validate checks the field values on QueryFriendListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryFriendListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryFriendListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryFriendListResponseMultiError, or nil if none found.
func (m *QueryFriendListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryFriendListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryFriendListResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryFriendListResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryFriendListResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetFriendList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryFriendListResponseValidationError{
						field:  fmt.Sprintf("FriendList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryFriendListResponseValidationError{
						field:  fmt.Sprintf("FriendList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryFriendListResponseValidationError{
					field:  fmt.Sprintf("FriendList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QueryFriendListResponseMultiError(errors)
	}

	return nil
}

// QueryFriendListResponseMultiError is an error wrapping multiple validation
// errors returned by QueryFriendListResponse.ValidateAll() if the designated
// constraints aren't met.
type QueryFriendListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryFriendListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryFriendListResponseMultiError) AllErrors() []error { return m }

// QueryFriendListResponseValidationError is the validation error returned by
// QueryFriendListResponse.Validate if the designated constraints aren't met.
type QueryFriendListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryFriendListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryFriendListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryFriendListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryFriendListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryFriendListResponseValidationError) ErrorName() string {
	return "QueryFriendListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryFriendListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryFriendListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryFriendListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryFriendListResponseValidationError{}

// Validate checks the field values on FriendRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FriendRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FriendRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FriendRequestMultiError, or
// nil if none found.
func (m *FriendRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FriendRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for FriendUid

	// no validation rules for Status

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for FriendName

	// no validation rules for FriendAvatar

	if len(errors) > 0 {
		return FriendRequestMultiError(errors)
	}

	return nil
}

// FriendRequestMultiError is an error wrapping multiple validation errors
// returned by FriendRequest.ValidateAll() if the designated constraints
// aren't met.
type FriendRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FriendRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FriendRequestMultiError) AllErrors() []error { return m }

// FriendRequestValidationError is the validation error returned by
// FriendRequest.Validate if the designated constraints aren't met.
type FriendRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FriendRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FriendRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FriendRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FriendRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FriendRequestValidationError) ErrorName() string { return "FriendRequestValidationError" }

// Error satisfies the builtin error interface
func (e FriendRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFriendRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FriendRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FriendRequestValidationError{}

// Validate checks the field values on AddFriendRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddFriendRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddFriendRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddFriendRequestMultiError, or nil if none found.
func (m *AddFriendRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddFriendRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUid()); l < 20 || l > 24 {
		err := AddFriendRequestValidationError{
			field:  "Uid",
			reason: "value length must be between 20 and 24 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	switch m.FriendInfo.(type) {

	case *AddFriendRequest_Email:

		if err := m._validateEmail(m.GetEmail()); err != nil {
			err = AddFriendRequestValidationError{
				field:  "Email",
				reason: "value must be a valid email address",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *AddFriendRequest_Phone:

		if !_AddFriendRequest_Phone_Pattern.MatchString(m.GetPhone()) {
			err := AddFriendRequestValidationError{
				field:  "Phone",
				reason: "value does not match regex pattern \"^1[3-9]\\\\d{9}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	default:
		err := AddFriendRequestValidationError{
			field:  "FriendInfo",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return AddFriendRequestMultiError(errors)
	}

	return nil
}

func (m *AddFriendRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *AddFriendRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// AddFriendRequestMultiError is an error wrapping multiple validation errors
// returned by AddFriendRequest.ValidateAll() if the designated constraints
// aren't met.
type AddFriendRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddFriendRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddFriendRequestMultiError) AllErrors() []error { return m }

// AddFriendRequestValidationError is the validation error returned by
// AddFriendRequest.Validate if the designated constraints aren't met.
type AddFriendRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddFriendRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddFriendRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddFriendRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddFriendRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddFriendRequestValidationError) ErrorName() string { return "AddFriendRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddFriendRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddFriendRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddFriendRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddFriendRequestValidationError{}

var _AddFriendRequest_Phone_Pattern = regexp.MustCompile("^1[3-9]\\d{9}$")

// Validate checks the field values on BaseFriendRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BaseFriendRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BaseFriendRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BaseFriendRequestMultiError, or nil if none found.
func (m *BaseFriendRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BaseFriendRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUid()); l < 20 || l > 24 {
		err := BaseFriendRequestValidationError{
			field:  "Uid",
			reason: "value length must be between 20 and 24 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetFriendUid()); l < 20 || l > 24 {
		err := BaseFriendRequestValidationError{
			field:  "FriendUid",
			reason: "value length must be between 20 and 24 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BaseFriendRequestMultiError(errors)
	}

	return nil
}

// BaseFriendRequestMultiError is an error wrapping multiple validation errors
// returned by BaseFriendRequest.ValidateAll() if the designated constraints
// aren't met.
type BaseFriendRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BaseFriendRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BaseFriendRequestMultiError) AllErrors() []error { return m }

// BaseFriendRequestValidationError is the validation error returned by
// BaseFriendRequest.Validate if the designated constraints aren't met.
type BaseFriendRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BaseFriendRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BaseFriendRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BaseFriendRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BaseFriendRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BaseFriendRequestValidationError) ErrorName() string {
	return "BaseFriendRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BaseFriendRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBaseFriendRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BaseFriendRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BaseFriendRequestValidationError{}

// Validate checks the field values on AddFriendResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddFriendResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddFriendResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddFriendResponseMultiError, or nil if none found.
func (m *AddFriendResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddFriendResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddFriendResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddFriendResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddFriendResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddFriendResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddFriendResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddFriendResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddFriendResponseMultiError(errors)
	}

	return nil
}

// AddFriendResponseMultiError is an error wrapping multiple validation errors
// returned by AddFriendResponse.ValidateAll() if the designated constraints
// aren't met.
type AddFriendResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddFriendResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddFriendResponseMultiError) AllErrors() []error { return m }

// AddFriendResponseValidationError is the validation error returned by
// AddFriendResponse.Validate if the designated constraints aren't met.
type AddFriendResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddFriendResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddFriendResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddFriendResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddFriendResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddFriendResponseValidationError) ErrorName() string {
	return "AddFriendResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddFriendResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddFriendResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddFriendResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddFriendResponseValidationError{}

// Validate checks the field values on AddFriendResult with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddFriendResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddFriendResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddFriendResultMultiError, or nil if none found.
func (m *AddFriendResult) ValidateAll() error {
	return m.validate(true)
}

func (m *AddFriendResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetFriendRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddFriendResultValidationError{
					field:  "FriendRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddFriendResultValidationError{
					field:  "FriendRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFriendRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddFriendResultValidationError{
				field:  "FriendRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddFriendResultMultiError(errors)
	}

	return nil
}

// AddFriendResultMultiError is an error wrapping multiple validation errors
// returned by AddFriendResult.ValidateAll() if the designated constraints
// aren't met.
type AddFriendResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddFriendResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddFriendResultMultiError) AllErrors() []error { return m }

// AddFriendResultValidationError is the validation error returned by
// AddFriendResult.Validate if the designated constraints aren't met.
type AddFriendResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddFriendResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddFriendResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddFriendResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddFriendResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddFriendResultValidationError) ErrorName() string { return "AddFriendResultValidationError" }

// Error satisfies the builtin error interface
func (e AddFriendResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddFriendResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddFriendResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddFriendResultValidationError{}

// Validate checks the field values on ConfirmFriendRequestReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfirmFriendRequestReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfirmFriendRequestReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfirmFriendRequestReqMultiError, or nil if none found.
func (m *ConfirmFriendRequestReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfirmFriendRequestReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUid()); l < 20 || l > 24 {
		err := ConfirmFriendRequestReqValidationError{
			field:  "Uid",
			reason: "value length must be between 20 and 24 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetFriendRequestId() <= 0 {
		err := ConfirmFriendRequestReqValidationError{
			field:  "FriendRequestId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := ConfirmFriendRequestAction_name[int32(m.GetAction())]; !ok {
		err := ConfirmFriendRequestReqValidationError{
			field:  "Action",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ConfirmFriendRequestReqMultiError(errors)
	}

	return nil
}

// ConfirmFriendRequestReqMultiError is an error wrapping multiple validation
// errors returned by ConfirmFriendRequestReq.ValidateAll() if the designated
// constraints aren't met.
type ConfirmFriendRequestReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfirmFriendRequestReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfirmFriendRequestReqMultiError) AllErrors() []error { return m }

// ConfirmFriendRequestReqValidationError is the validation error returned by
// ConfirmFriendRequestReq.Validate if the designated constraints aren't met.
type ConfirmFriendRequestReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmFriendRequestReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmFriendRequestReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfirmFriendRequestReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmFriendRequestReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmFriendRequestReqValidationError) ErrorName() string {
	return "ConfirmFriendRequestReqValidationError"
}

// Error satisfies the builtin error interface
func (e ConfirmFriendRequestReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmFriendRequestReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmFriendRequestReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmFriendRequestReqValidationError{}

// Validate checks the field values on GetFriendRequestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendRequestResponseMultiError, or nil if none found.
func (m *GetFriendRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFriendRequestResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFriendRequestResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFriendRequestResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFriendRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFriendRequestResponseValidationError{
					field:  "FriendRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFriendRequestResponseValidationError{
					field:  "FriendRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFriendRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFriendRequestResponseValidationError{
				field:  "FriendRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetFriendRequestResponseMultiError(errors)
	}

	return nil
}

// GetFriendRequestResponseMultiError is an error wrapping multiple validation
// errors returned by GetFriendRequestResponse.ValidateAll() if the designated
// constraints aren't met.
type GetFriendRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendRequestResponseMultiError) AllErrors() []error { return m }

// GetFriendRequestResponseValidationError is the validation error returned by
// GetFriendRequestResponse.Validate if the designated constraints aren't met.
type GetFriendRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendRequestResponseValidationError) ErrorName() string {
	return "GetFriendRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendRequestResponseValidationError{}

// Validate checks the field values on QueryFriendRequestListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryFriendRequestListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryFriendRequestListRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// QueryFriendRequestListRequestMultiError, or nil if none found.
func (m *QueryFriendRequestListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryFriendRequestListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUid()); l < 20 || l > 24 {
		err := QueryFriendRequestListRequestValidationError{
			field:  "Uid",
			reason: "value length must be between 20 and 24 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return QueryFriendRequestListRequestMultiError(errors)
	}

	return nil
}

// QueryFriendRequestListRequestMultiError is an error wrapping multiple
// validation errors returned by QueryFriendRequestListRequest.ValidateAll()
// if the designated constraints aren't met.
type QueryFriendRequestListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryFriendRequestListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryFriendRequestListRequestMultiError) AllErrors() []error { return m }

// QueryFriendRequestListRequestValidationError is the validation error
// returned by QueryFriendRequestListRequest.Validate if the designated
// constraints aren't met.
type QueryFriendRequestListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryFriendRequestListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryFriendRequestListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryFriendRequestListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryFriendRequestListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryFriendRequestListRequestValidationError) ErrorName() string {
	return "QueryFriendRequestListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryFriendRequestListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryFriendRequestListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryFriendRequestListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryFriendRequestListRequestValidationError{}

// Validate checks the field values on QueryFriendRequestListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryFriendRequestListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryFriendRequestListResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// QueryFriendRequestListResponseMultiError, or nil if none found.
func (m *QueryFriendRequestListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryFriendRequestListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryFriendRequestListResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryFriendRequestListResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryFriendRequestListResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetFriendRequestList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryFriendRequestListResponseValidationError{
						field:  fmt.Sprintf("FriendRequestList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryFriendRequestListResponseValidationError{
						field:  fmt.Sprintf("FriendRequestList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryFriendRequestListResponseValidationError{
					field:  fmt.Sprintf("FriendRequestList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QueryFriendRequestListResponseMultiError(errors)
	}

	return nil
}

// QueryFriendRequestListResponseMultiError is an error wrapping multiple
// validation errors returned by QueryFriendRequestListResponse.ValidateAll()
// if the designated constraints aren't met.
type QueryFriendRequestListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryFriendRequestListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryFriendRequestListResponseMultiError) AllErrors() []error { return m }

// QueryFriendRequestListResponseValidationError is the validation error
// returned by QueryFriendRequestListResponse.Validate if the designated
// constraints aren't met.
type QueryFriendRequestListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryFriendRequestListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryFriendRequestListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryFriendRequestListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryFriendRequestListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryFriendRequestListResponseValidationError) ErrorName() string {
	return "QueryFriendRequestListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryFriendRequestListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryFriendRequestListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryFriendRequestListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryFriendRequestListResponseValidationError{}
