syntax = "proto3";

package api.user.v1;
option go_package = "api/user/v1;v1";

import "validate/validate.proto";

enum LoginStatus {
  LOGIN = 0;
  ALREADY_LOGIN = 1;
  LOGOUT = 2;
}

// UserInternal is the internal representation of a user.
message UserInternal {
  string uid = 1;
  string name = 2;
  string email = 3;
  string phone = 4;
  string avatar = 5;
  // AgentID only valid when user already login.
  optional string agent_id = 6;
  string password = 7;
  // 0: first time login, need connect to push server
  // 1: already login, no need connect to push server
  LoginStatus login_status = 8;
  int64 create_at = 9;
  int64 update_at = 10;
}

// User use for return user info to client.
message User {
  string uid = 1;
  string name = 2;
  string email = 3;
  string phone = 4;
  string avatar = 5;
  // AgentID only valid when user already login.
  optional string agent_id = 6;
  // 0: first time login, need connect to push server
  // 1: already login, no need connect to push server
  LoginStatus login_status = 8;
}

message UserList {
  repeated User users = 1;
}

message GetUserInfoRequest {
  string uid = 1 [(validate.rules).string = {min_len: 20, max_len: 24}];
}

message QueryUserRequest {
  oneof user {
    option (validate.required) = true;
    string email = 1 [(validate.rules).string.email = true];
    string phone = 2 [(validate.rules).string.pattern = "^1[3-9]\\d{9}$"];
  }
}


message CreateUserRequest {
  string name = 1 [(validate.rules).string = {min_len: 2, max_len: 20}];
  oneof user {
    option (validate.required) = true;
    string email = 2 [(validate.rules).string.email = true];
    string phone = 3 [(validate.rules).string.pattern = "^1[3-9]\\d{9}$"];
  }
  string password = 4 [(validate.rules).string = {min_len: 6, max_len: 20}];
}

message UpdateUserRequest {
  string uid = 1 [(validate.rules).string = {min_len: 20, max_len: 24}];
  string name = 2 [(validate.rules).string = {min_len: 2, max_len: 20, ignore_empty: true}];
  string email = 3 [(validate.rules).string = {email: true,ignore_empty: true}];
  string phone = 4 [(validate.rules).string = {pattern: "^1[3-9]\\d{9}$", ignore_empty: true}];
  string avatar = 5 [(validate.rules).string = {max_len:128, ignore_empty: true}];
}


service UserService {
  // GetUser get user info by uid, called when uid is known.
  rpc GetUser(GetUserInfoRequest) returns (UserInternal);
  // QueryUser query user info by email or phone, called when uid is unknown.
  rpc QueryUser(QueryUserRequest) returns (UserInternal);
  // CreateUser create user.
  rpc CreateUser(CreateUserRequest) returns (UserInternal);
  // UpdateUser update user info.
  rpc UpdateUser(UpdateUserRequest) returns (UserInternal);
}



message UserLoginRequest {
  oneof user {
    option (validate.required) = true;
    string email = 1 [(validate.rules).string.email = true];
    string phone = 2 [(validate.rules).string.pattern = "^1[3-9]\\d{9}$"];
  }

  string password = 3;
  // 0: try login , do nothing if already login
  // 1: force login , logout if already login
  LoginType login_type = 4;
}

enum LoginType {
  LOGIN_TYPE_TRY = 0;
  LOGIN_TYPE_FORCE = 1;
}
