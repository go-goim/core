// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/user/v1/user_relation.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserRelation with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserRelation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRelation with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserRelationMultiError, or
// nil if none found.
func (m *UserRelation) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRelation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for FriendUid

	// no validation rules for FriendName

	// no validation rules for FriendAvatar

	// no validation rules for Status

	// no validation rules for CreateAt

	// no validation rules for UpdateAt

	if len(errors) > 0 {
		return UserRelationMultiError(errors)
	}

	return nil
}

// UserRelationMultiError is an error wrapping multiple validation errors
// returned by UserRelation.ValidateAll() if the designated constraints aren't met.
type UserRelationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRelationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRelationMultiError) AllErrors() []error { return m }

// UserRelationValidationError is the validation error returned by
// UserRelation.Validate if the designated constraints aren't met.
type UserRelationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRelationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRelationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRelationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRelationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRelationValidationError) ErrorName() string { return "UserRelationValidationError" }

// Error satisfies the builtin error interface
func (e UserRelationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRelation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRelationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRelationValidationError{}

// Validate checks the field values on UserRelationList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserRelationList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRelationList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserRelationListMultiError, or nil if none found.
func (m *UserRelationList) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRelationList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUserRelation() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserRelationListValidationError{
						field:  fmt.Sprintf("UserRelation[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserRelationListValidationError{
						field:  fmt.Sprintf("UserRelation[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserRelationListValidationError{
					field:  fmt.Sprintf("UserRelation[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UserRelationListMultiError(errors)
	}

	return nil
}

// UserRelationListMultiError is an error wrapping multiple validation errors
// returned by UserRelationList.ValidateAll() if the designated constraints
// aren't met.
type UserRelationListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRelationListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRelationListMultiError) AllErrors() []error { return m }

// UserRelationListValidationError is the validation error returned by
// UserRelationList.Validate if the designated constraints aren't met.
type UserRelationListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRelationListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRelationListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRelationListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRelationListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRelationListValidationError) ErrorName() string { return "UserRelationListValidationError" }

// Error satisfies the builtin error interface
func (e UserRelationListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRelationList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRelationListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRelationListValidationError{}

// Validate checks the field values on AddFriendRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddFriendRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddFriendRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddFriendRequestMultiError, or nil if none found.
func (m *AddFriendRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddFriendRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUid()); l < 20 || l > 24 {
		err := AddFriendRequestValidationError{
			field:  "Uid",
			reason: "value length must be between 20 and 24 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetFriendUid()); l < 20 || l > 24 {
		err := AddFriendRequestValidationError{
			field:  "FriendUid",
			reason: "value length must be between 20 and 24 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddFriendRequestMultiError(errors)
	}

	return nil
}

// AddFriendRequestMultiError is an error wrapping multiple validation errors
// returned by AddFriendRequest.ValidateAll() if the designated constraints
// aren't met.
type AddFriendRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddFriendRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddFriendRequestMultiError) AllErrors() []error { return m }

// AddFriendRequestValidationError is the validation error returned by
// AddFriendRequest.Validate if the designated constraints aren't met.
type AddFriendRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddFriendRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddFriendRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddFriendRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddFriendRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddFriendRequestValidationError) ErrorName() string { return "AddFriendRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddFriendRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddFriendRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddFriendRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddFriendRequestValidationError{}

// Validate checks the field values on AddFriendResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddFriendResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddFriendResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddFriendResponseMultiError, or nil if none found.
func (m *AddFriendResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddFriendResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetUserRelation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddFriendResponseValidationError{
					field:  "UserRelation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddFriendResponseValidationError{
					field:  "UserRelation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserRelation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddFriendResponseValidationError{
				field:  "UserRelation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddFriendResponseMultiError(errors)
	}

	return nil
}

// AddFriendResponseMultiError is an error wrapping multiple validation errors
// returned by AddFriendResponse.ValidateAll() if the designated constraints
// aren't met.
type AddFriendResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddFriendResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddFriendResponseMultiError) AllErrors() []error { return m }

// AddFriendResponseValidationError is the validation error returned by
// AddFriendResponse.Validate if the designated constraints aren't met.
type AddFriendResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddFriendResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddFriendResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddFriendResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddFriendResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddFriendResponseValidationError) ErrorName() string {
	return "AddFriendResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddFriendResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddFriendResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddFriendResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddFriendResponseValidationError{}

// Validate checks the field values on GetUserRelationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserRelationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRelationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserRelationRequestMultiError, or nil if none found.
func (m *GetUserRelationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRelationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUid()); l < 20 || l > 24 {
		err := GetUserRelationRequestValidationError{
			field:  "Uid",
			reason: "value length must be between 20 and 24 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetFriendUid()); l < 20 || l > 24 {
		err := GetUserRelationRequestValidationError{
			field:  "FriendUid",
			reason: "value length must be between 20 and 24 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserRelationRequestMultiError(errors)
	}

	return nil
}

// GetUserRelationRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserRelationRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserRelationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRelationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRelationRequestMultiError) AllErrors() []error { return m }

// GetUserRelationRequestValidationError is the validation error returned by
// GetUserRelationRequest.Validate if the designated constraints aren't met.
type GetUserRelationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRelationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRelationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRelationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRelationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRelationRequestValidationError) ErrorName() string {
	return "GetUserRelationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserRelationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRelationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRelationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRelationRequestValidationError{}

// Validate checks the field values on GetUserRelationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserRelationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRelationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserRelationResponseMultiError, or nil if none found.
func (m *GetUserRelationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRelationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserRelation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserRelationResponseValidationError{
					field:  "UserRelation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserRelationResponseValidationError{
					field:  "UserRelation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserRelation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserRelationResponseValidationError{
				field:  "UserRelation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserRelationResponseMultiError(errors)
	}

	return nil
}

// GetUserRelationResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserRelationResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserRelationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRelationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRelationResponseMultiError) AllErrors() []error { return m }

// GetUserRelationResponseValidationError is the validation error returned by
// GetUserRelationResponse.Validate if the designated constraints aren't met.
type GetUserRelationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRelationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRelationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRelationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRelationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRelationResponseValidationError) ErrorName() string {
	return "GetUserRelationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserRelationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRelationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRelationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRelationResponseValidationError{}

// Validate checks the field values on QueryUserRelationListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryUserRelationListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryUserRelationListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryUserRelationListRequestMultiError, or nil if none found.
func (m *QueryUserRelationListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryUserRelationListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUid()); l < 20 || l > 24 {
		err := QueryUserRelationListRequestValidationError{
			field:  "Uid",
			reason: "value length must be between 20 and 24 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return QueryUserRelationListRequestMultiError(errors)
	}

	return nil
}

// QueryUserRelationListRequestMultiError is an error wrapping multiple
// validation errors returned by QueryUserRelationListRequest.ValidateAll() if
// the designated constraints aren't met.
type QueryUserRelationListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryUserRelationListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryUserRelationListRequestMultiError) AllErrors() []error { return m }

// QueryUserRelationListRequestValidationError is the validation error returned
// by QueryUserRelationListRequest.Validate if the designated constraints
// aren't met.
type QueryUserRelationListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryUserRelationListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryUserRelationListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryUserRelationListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryUserRelationListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryUserRelationListRequestValidationError) ErrorName() string {
	return "QueryUserRelationListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryUserRelationListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryUserRelationListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryUserRelationListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryUserRelationListRequestValidationError{}

// Validate checks the field values on QueryUserRelationListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryUserRelationListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryUserRelationListResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// QueryUserRelationListResponseMultiError, or nil if none found.
func (m *QueryUserRelationListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryUserRelationListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUserRelationList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryUserRelationListResponseValidationError{
						field:  fmt.Sprintf("UserRelationList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryUserRelationListResponseValidationError{
						field:  fmt.Sprintf("UserRelationList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryUserRelationListResponseValidationError{
					field:  fmt.Sprintf("UserRelationList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QueryUserRelationListResponseMultiError(errors)
	}

	return nil
}

// QueryUserRelationListResponseMultiError is an error wrapping multiple
// validation errors returned by QueryUserRelationListResponse.ValidateAll()
// if the designated constraints aren't met.
type QueryUserRelationListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryUserRelationListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryUserRelationListResponseMultiError) AllErrors() []error { return m }

// QueryUserRelationListResponseValidationError is the validation error
// returned by QueryUserRelationListResponse.Validate if the designated
// constraints aren't met.
type QueryUserRelationListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryUserRelationListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryUserRelationListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryUserRelationListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryUserRelationListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryUserRelationListResponseValidationError) ErrorName() string {
	return "QueryUserRelationListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryUserRelationListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryUserRelationListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryUserRelationListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryUserRelationListResponseValidationError{}

// Validate checks the field values on UpdateUserRelationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserRelationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserRelationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserRelationRequestMultiError, or nil if none found.
func (m *UpdateUserRelationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserRelationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUid()); l < 20 || l > 24 {
		err := UpdateUserRelationRequestValidationError{
			field:  "Uid",
			reason: "value length must be between 20 and 24 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetFriendUid()); l < 20 || l > 24 {
		err := UpdateUserRelationRequestValidationError{
			field:  "FriendUid",
			reason: "value length must be between 20 and 24 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := UpdateUserRelationAction_name[int32(m.GetAction())]; !ok {
		err := UpdateUserRelationRequestValidationError{
			field:  "Action",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateUserRelationRequestMultiError(errors)
	}

	return nil
}

// UpdateUserRelationRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateUserRelationRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateUserRelationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserRelationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserRelationRequestMultiError) AllErrors() []error { return m }

// UpdateUserRelationRequestValidationError is the validation error returned by
// UpdateUserRelationRequest.Validate if the designated constraints aren't met.
type UpdateUserRelationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRelationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRelationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRelationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRelationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRelationRequestValidationError) ErrorName() string {
	return "UpdateUserRelationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserRelationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRelationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRelationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRelationRequestValidationError{}

// Validate checks the field values on UpdateUserRelationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserRelationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserRelationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserRelationResponseMultiError, or nil if none found.
func (m *UpdateUserRelationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserRelationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateUserRelationResponseMultiError(errors)
	}

	return nil
}

// UpdateUserRelationResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateUserRelationResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateUserRelationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserRelationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserRelationResponseMultiError) AllErrors() []error { return m }

// UpdateUserRelationResponseValidationError is the validation error returned
// by UpdateUserRelationResponse.Validate if the designated constraints aren't met.
type UpdateUserRelationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRelationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRelationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRelationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRelationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRelationResponseValidationError) ErrorName() string {
	return "UpdateUserRelationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserRelationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRelationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRelationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRelationResponseValidationError{}

// Validate checks the field values on AcceptFriendRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AcceptFriendRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcceptFriendRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AcceptFriendRequestMultiError, or nil if none found.
func (m *AcceptFriendRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AcceptFriendRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUid()); l < 20 || l > 24 {
		err := AcceptFriendRequestValidationError{
			field:  "Uid",
			reason: "value length must be between 20 and 24 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetFriendUid()); l < 20 || l > 24 {
		err := AcceptFriendRequestValidationError{
			field:  "FriendUid",
			reason: "value length must be between 20 and 24 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AcceptFriendRequestMultiError(errors)
	}

	return nil
}

// AcceptFriendRequestMultiError is an error wrapping multiple validation
// errors returned by AcceptFriendRequest.ValidateAll() if the designated
// constraints aren't met.
type AcceptFriendRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcceptFriendRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcceptFriendRequestMultiError) AllErrors() []error { return m }

// AcceptFriendRequestValidationError is the validation error returned by
// AcceptFriendRequest.Validate if the designated constraints aren't met.
type AcceptFriendRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptFriendRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptFriendRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptFriendRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptFriendRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptFriendRequestValidationError) ErrorName() string {
	return "AcceptFriendRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AcceptFriendRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptFriendRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptFriendRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptFriendRequestValidationError{}

// Validate checks the field values on RemoveFriendRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveFriendRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveFriendRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveFriendRequestMultiError, or nil if none found.
func (m *RemoveFriendRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveFriendRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUid()); l < 20 || l > 24 {
		err := RemoveFriendRequestValidationError{
			field:  "Uid",
			reason: "value length must be between 20 and 24 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetFriendUid()); l < 20 || l > 24 {
		err := RemoveFriendRequestValidationError{
			field:  "FriendUid",
			reason: "value length must be between 20 and 24 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RemoveFriendRequestMultiError(errors)
	}

	return nil
}

// RemoveFriendRequestMultiError is an error wrapping multiple validation
// errors returned by RemoveFriendRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveFriendRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveFriendRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveFriendRequestMultiError) AllErrors() []error { return m }

// RemoveFriendRequestValidationError is the validation error returned by
// RemoveFriendRequest.Validate if the designated constraints aren't met.
type RemoveFriendRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveFriendRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveFriendRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveFriendRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveFriendRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveFriendRequestValidationError) ErrorName() string {
	return "RemoveFriendRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveFriendRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveFriendRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveFriendRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveFriendRequestValidationError{}

// Validate checks the field values on RejectFriendRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RejectFriendRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RejectFriendRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RejectFriendRequestMultiError, or nil if none found.
func (m *RejectFriendRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RejectFriendRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUid()); l < 20 || l > 24 {
		err := RejectFriendRequestValidationError{
			field:  "Uid",
			reason: "value length must be between 20 and 24 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetFriendUid()); l < 20 || l > 24 {
		err := RejectFriendRequestValidationError{
			field:  "FriendUid",
			reason: "value length must be between 20 and 24 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RejectFriendRequestMultiError(errors)
	}

	return nil
}

// RejectFriendRequestMultiError is an error wrapping multiple validation
// errors returned by RejectFriendRequest.ValidateAll() if the designated
// constraints aren't met.
type RejectFriendRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RejectFriendRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RejectFriendRequestMultiError) AllErrors() []error { return m }

// RejectFriendRequestValidationError is the validation error returned by
// RejectFriendRequest.Validate if the designated constraints aren't met.
type RejectFriendRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RejectFriendRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RejectFriendRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RejectFriendRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RejectFriendRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RejectFriendRequestValidationError) ErrorName() string {
	return "RejectFriendRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RejectFriendRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRejectFriendRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RejectFriendRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RejectFriendRequestValidationError{}

// Validate checks the field values on BlockFriendRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BlockFriendRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlockFriendRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BlockFriendRequestMultiError, or nil if none found.
func (m *BlockFriendRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BlockFriendRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUid()); l < 20 || l > 24 {
		err := BlockFriendRequestValidationError{
			field:  "Uid",
			reason: "value length must be between 20 and 24 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetFriendUid()); l < 20 || l > 24 {
		err := BlockFriendRequestValidationError{
			field:  "FriendUid",
			reason: "value length must be between 20 and 24 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BlockFriendRequestMultiError(errors)
	}

	return nil
}

// BlockFriendRequestMultiError is an error wrapping multiple validation errors
// returned by BlockFriendRequest.ValidateAll() if the designated constraints
// aren't met.
type BlockFriendRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlockFriendRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlockFriendRequestMultiError) AllErrors() []error { return m }

// BlockFriendRequestValidationError is the validation error returned by
// BlockFriendRequest.Validate if the designated constraints aren't met.
type BlockFriendRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockFriendRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockFriendRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockFriendRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockFriendRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockFriendRequestValidationError) ErrorName() string {
	return "BlockFriendRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BlockFriendRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlockFriendRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockFriendRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockFriendRequestValidationError{}

// Validate checks the field values on UnblockFriendRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnblockFriendRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnblockFriendRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnblockFriendRequestMultiError, or nil if none found.
func (m *UnblockFriendRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnblockFriendRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUid()); l < 20 || l > 24 {
		err := UnblockFriendRequestValidationError{
			field:  "Uid",
			reason: "value length must be between 20 and 24 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetFriendUid()); l < 20 || l > 24 {
		err := UnblockFriendRequestValidationError{
			field:  "FriendUid",
			reason: "value length must be between 20 and 24 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UnblockFriendRequestMultiError(errors)
	}

	return nil
}

// UnblockFriendRequestMultiError is an error wrapping multiple validation
// errors returned by UnblockFriendRequest.ValidateAll() if the designated
// constraints aren't met.
type UnblockFriendRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnblockFriendRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnblockFriendRequestMultiError) AllErrors() []error { return m }

// UnblockFriendRequestValidationError is the validation error returned by
// UnblockFriendRequest.Validate if the designated constraints aren't met.
type UnblockFriendRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnblockFriendRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnblockFriendRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnblockFriendRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnblockFriendRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnblockFriendRequestValidationError) ErrorName() string {
	return "UnblockFriendRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnblockFriendRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnblockFriendRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnblockFriendRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnblockFriendRequestValidationError{}
