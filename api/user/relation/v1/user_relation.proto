syntax = "proto3";

package api.user.v1;
option go_package = "api/user/relation/v1;v1";

import "validate/validate.proto";

import "transport/response/response.proto";

message UserRelation {
  string uid = 1;
  string friend_uid = 2;
  string friend_name = 3;
  string friend_avatar = 4;
  RelationStatus status = 5;
  int64 create_at = 6;
  int64 update_at = 7;
}

enum RelationStatus {
  REQUESTED = 0;
  FRIEND = 1;
  STRANGER = 2;
  BLOCKED = 3;
}

message UserRelationList {
  repeated UserRelation user_relation = 1;
}

message AddFriendRequest {
  string uid = 1 [(validate.rules).string = {min_len: 20, max_len: 24}];
  string friend_uid = 2 [(validate.rules).string = {min_len: 20, max_len: 24}];
}

message AddFriendResponse {
  transport.response.BaseResponse response = 1;
  AddFriendStatus status = 2;
  UserRelation user_relation = 3;
}

enum AddFriendStatus {
  SEND_REQUEST_SUCCESS = 0;
  SUCCESS = 1;
  FAILED = 2;
  ALREADY_FRIEND = 3;
  ALREADY_REQUESTED = 4;
  NOT_FOUND = 5;
  BLOCKED_BY_ME = 6;
  BLOCKED_BY_FRIEND = 7;
}

message GetUserRelationRequest {
  string uid = 1 [(validate.rules).string = {min_len: 20, max_len: 24}];
  string friend_uid = 2 [(validate.rules).string = {min_len: 20, max_len: 24}];
}

message GetUserRelationResponse {
  transport.response.BaseResponse response = 1;
  UserRelation user_relation = 2;
}

message QueryUserRelationListRequest {
  string uid = 1 [(validate.rules).string = {min_len: 20, max_len: 24}];
}

message QueryUserRelationListResponse {
  transport.response.BaseResponse response = 1;
  repeated UserRelation user_relation_list = 2;
}

enum UpdateUserRelationAction {
  ACCEPT = 0; // accept friend request
  REJECT = 1; // reject friend request
  DELETE = 2; // delete friend
  BLOCK = 3; // block friend
  UNBLOCK = 4; // unblock friend
}

message RelationPair {
  string uid = 1 [(validate.rules).string = {min_len: 20, max_len: 24}];
  string friend_uid = 2 [(validate.rules).string = {min_len: 20, max_len: 24}];
}

message UpdateUserRelationRequest {
  RelationPair relation_pair = 1 [(validate.rules).message.required = true];
  UpdateUserRelationAction action = 2 [(validate.rules).enum.defined_only = true];
}


service UserRelationService {
  rpc AddFriend(AddFriendRequest) returns (AddFriendResponse);
  rpc GetUserRelation(GetUserRelationRequest) returns (GetUserRelationResponse);
  rpc QueryUserRelationList(QueryUserRelationListRequest) returns (QueryUserRelationListResponse);
  rpc UpdateUserRelation(UpdateUserRelationRequest) returns (transport.response.BaseResponse);
}
