// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/config/registry/v1/registry.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RegistryInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RegistryInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegistryInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RegistryInfoMultiError, or
// nil if none found.
func (m *RegistryInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *RegistryInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetAddr()) < 1 {
		err := RegistryInfoValidationError{
			field:  "Addr",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_RegistryInfo_Addr_Unique := make(map[string]struct{}, len(m.GetAddr()))

	for idx, item := range m.GetAddr() {
		_, _ = idx, item

		if _, exists := _RegistryInfo_Addr_Unique[item]; exists {
			err := RegistryInfoValidationError{
				field:  fmt.Sprintf("Addr[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_RegistryInfo_Addr_Unique[item] = struct{}{}
		}

		// no validation rules for Addr[idx]
	}

	if _, ok := _RegistryInfo_Scheme_InLookup[m.GetScheme()]; !ok {
		err := RegistryInfoValidationError{
			field:  "Scheme",
			reason: "value must be in list [http grpc]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if d := m.GetDialTimeoutSec(); d != nil {
		dur, err := d.AsDuration(), d.CheckValid()
		if err != nil {
			err = RegistryInfoValidationError{
				field:  "DialTimeoutSec",
				reason: "value is not a valid duration",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			lte := time.Duration(10*time.Second + 0*time.Nanosecond)
			gte := time.Duration(0*time.Second + 1000000*time.Nanosecond)

			if dur < gte || dur > lte {
				err := RegistryInfoValidationError{
					field:  "DialTimeoutSec",
					reason: "value must be inside range [1ms, 10s]",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if all {
		switch v := interface{}(m.GetDialKeepAliveTimeSec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegistryInfoValidationError{
					field:  "DialKeepAliveTimeSec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegistryInfoValidationError{
					field:  "DialKeepAliveTimeSec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDialKeepAliveTimeSec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegistryInfoValidationError{
				field:  "DialKeepAliveTimeSec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDialKeepAliveTimeoutSec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegistryInfoValidationError{
					field:  "DialKeepAliveTimeoutSec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegistryInfoValidationError{
					field:  "DialKeepAliveTimeoutSec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDialKeepAliveTimeoutSec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegistryInfoValidationError{
				field:  "DialKeepAliveTimeoutSec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegistryInfoMultiError(errors)
	}

	return nil
}

// RegistryInfoMultiError is an error wrapping multiple validation errors
// returned by RegistryInfo.ValidateAll() if the designated constraints aren't met.
type RegistryInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegistryInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegistryInfoMultiError) AllErrors() []error { return m }

// RegistryInfoValidationError is the validation error returned by
// RegistryInfo.Validate if the designated constraints aren't met.
type RegistryInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegistryInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegistryInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegistryInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegistryInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegistryInfoValidationError) ErrorName() string { return "RegistryInfoValidationError" }

// Error satisfies the builtin error interface
func (e RegistryInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegistryInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegistryInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegistryInfoValidationError{}

var _RegistryInfo_Scheme_InLookup = map[string]struct{}{
	"http": {},
	"grpc": {},
}

// Validate checks the field values on Registry with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Registry) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Registry with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RegistryMultiError, or nil
// if none found.
func (m *Registry) ValidateAll() error {
	return m.validate(true)
}

func (m *Registry) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	switch m.Reg.(type) {

	case *Registry_Consul:

		if all {
			switch v := interface{}(m.GetConsul()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RegistryValidationError{
						field:  "Consul",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RegistryValidationError{
						field:  "Consul",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetConsul()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RegistryValidationError{
					field:  "Consul",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Registry_Etcd:

		if all {
			switch v := interface{}(m.GetEtcd()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RegistryValidationError{
						field:  "Etcd",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RegistryValidationError{
						field:  "Etcd",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEtcd()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RegistryValidationError{
					field:  "Etcd",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RegistryMultiError(errors)
	}

	return nil
}

// RegistryMultiError is an error wrapping multiple validation errors returned
// by Registry.ValidateAll() if the designated constraints aren't met.
type RegistryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegistryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegistryMultiError) AllErrors() []error { return m }

// RegistryValidationError is the validation error returned by
// Registry.Validate if the designated constraints aren't met.
type RegistryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegistryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegistryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegistryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegistryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegistryValidationError) ErrorName() string { return "RegistryValidationError" }

// Error satisfies the builtin error interface
func (e RegistryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegistry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegistryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegistryValidationError{}
